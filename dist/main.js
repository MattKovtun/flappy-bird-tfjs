!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);var i={world:{height:400,width:400,speed:5,blocksFrequency:200},bird:{width:15,height:15,color:"red",jumpSpeed:7,fallingSpeed:3,jumpLength:25},block:{width:85,height:105,color:"green"},agent:{retrainEpisodes:10,saveStates:4e3,explorationRate:.99,explorationRateDecay:.35}};var r=class{constructor(){this.upperHeight=i.block.height,this.lowerHeight=i.block.height,this.x=320,this.y=i.world.height-this.lowerHeight,this.width=i.block.width}collision(t){return t.y<=this.upperHeight&&t.x>=this.x&&t.x<=this.x+this.width||t.y>=i.world.height-this.lowerHeight&&t.x>=this.x&&t.x<=this.x+this.width}render(t){return t.beginPath(),t.fillStyle=i.block.color,t.fillRect(this.x,0,this.width,this.upperHeight),t.fillRect(this.x,this.y,this.width,this.lowerHeight),this}};var o=class{constructor(){this.y=200,this.x=35,this.jump=new Array(i.bird.jumpLength).fill(-i.bird.jumpSpeed);for(let t=0;t<10;++t)this.jump.push(-i.bird.fallingSpeed);this.jump.push(0)}render(t){return t.beginPath(),t.fillStyle=i.bird.color,t.arc(this.x,this.y,i.bird.height,0,2*Math.PI),t.fill(),this}};var n=class{constructor(t,e){this.ctx=e,this.canvas=t,this.score=0}startNewGame(){return this.bird=(new o).render(this.ctx),this.blocks=[(new r).render(this.ctx)],this.current_state=this.bird.jump.length-1,this.ticks=1,this.score=0,this}gameIsOver(){if(this.bird.y>=i.world.height)return!0;if(this.bird.y<=0)return!0;for(let t=0;t<this.blocks.length;++t)if(this.blocks[t].collision(this.bird))return!0;return!1}performAction(t){t&&(this.current_state=0)}moveBlocks(){this.ticks%i.world.blocksFrequency==0&&this.blocks.push(new r),this.blocks=this.blocks.filter(t=>{const e=t.x>=0-i.block.width;return e||this.score++,e}).map(t=>(t.x--,t))}moveBird(){this.bird.y+=this.bird.jump[this.current_state],this.bird.y+=i.bird.fallingSpeed,this.current_state=Math.min(this.bird.jump.length-1,this.current_state+1)}nextFrame(){this.moveBird(),this.moveBlocks(),this.ticks++;const t=this.gameIsOver();return{bird:this.bird,blocks:this.blocks,gameIsOver:t,ticks:this.ticks,score:this.score}}renderNextFrame(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.bird.render(this.ctx),this.blocks.map(t=>t.render(this.ctx))}};const h=t=>Math.floor(Math.random()*Math.floor(t)),a=(t,e)=>Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)),l=(t,e)=>{const s=document.createElement("div");t.map(t=>{const e=document.createElement("span");e.innerHTML=`Loss: ${t}`,s.appendChild(e)}),e.appendChild(s),e.scrollTop=e.scrollHeight},d=(t,e,s)=>{const i=t.length,r=t.reduce((t,e)=>t+e,0),o=r/i;s.innerHTML=`\n                    <span>Avg Episode Length: ${o}</span>\n                    <span>Number of episodes: ${i}</span>\n                    <span>Current state: ${r}</span>\n                    <span>Exploration rate: ${e}</span>`},c=(t,e)=>e.innerHTML=`Score: ${t}`;var p=class{constructor(t){this.initModel(),this.history=[],this.saveStates=t,this.state=0,this.losses=[],this.explorationRate=i.agent.explorationRate,this.explorationRateDecay=i.agent.explorationRateDecay}initModel(){this.model=tf.sequential(),this.model.add(tf.layers.dense({units:4,inputShape:[2]})),this.model.add(tf.layers.dense({units:2})),this.model.compile({loss:"meanSquaredError",optimizer:tf.train.adam()})}modelPredict(t){return this.model.predict(t)}async retrainModel(){this.explorationRate=Math.max(this.explorationRate-this.explorationRate*this.explorationRateDecay,.01),this.history.length>=2*this.saveStates&&(this.history=this.history.slice(this.history.length-this.saveStates));let t=[],e=[];for(let s=0;s<this.history.length;++s){const i=this.history[s];t.push([i[0],i[1]]),e.push([i[3],i[3]])}t=tf.tensor2d(t,[this.history.length,2]),e=tf.tensor2d(e,[this.history.length,2]);const s=await this.model.fit(t,e,{epochs:2});this.losses.push(s.history.loss[0])}calculateReward(t){let e=100;return t&&(e=-500),e}formModelInputs(t,e){const s=a(t,{x:e[0].x,y:t.y});return[a(t,{x:t.x,y:e[0].y}),s]}act(t){this.state++;const{bird:e,blocks:s,ticks:i,gameIsOver:r}=t,o=this.calculateReward(r),n=this.formModelInputs(e,s),{action:h,predictedReward:a}=this.getActionReward(n);return this.history.push([...n,a,o,h]),this.updateRewards(r,o),h}getActionReward(t){let e,s;if(this.randomMove())e=h(2),s=100;else{const i=this.modelPredict(tf.tensor2d(t,[1,2]));e=i.argMax(1).dataSync()[0],s=i.max(1).dataSync()[0]}return{action:e,predictedReward:s}}randomMove(){return!(this.explorationRate<=.01)&&Math.random()<=this.explorationRate}updateRewards(t,e){if(this.state>1&&(this.history[this.history.length-1][3]=e),t)for(let t=this.history.length-1;t>=0;--t)if(this.history[t][4]){this.history[t][3]=e;break}}};(new class{constructor(){this.canvas=document.getElementById("entry-point"),this.ctx=this.canvas.getContext("2d"),this.game=new n(this.canvas,this.ctx).startNewGame(),this.agent=new p(i.agent.saveStates),this.movementIndicator=document.getElementById("action"),this.lossInfo=document.getElementById("losses"),this.information=document.getElementById("information"),this.scoreInfo=document.getElementById("score"),this.episodes=[],this.playGame=!0,this.fastForward=0,this.mode=1}async main(){for(;this.playGame;)this.episodes.length>=this.fastForward&&await this.graphicMode(this.mode)}async graphicMode(t){const e=this.game.nextFrame(),s=this.agent.act(e),{score:r,gameIsOver:o,ticks:n}=e;this.game.performAction(s),o&&(this.episodes.push(n),this.game.startNewGame(),this.episodes.length%i.agent.retrainEpisodes==0&&(3!==t?await this.agent.retrainModel():this.agent.retrainModel())),1===t&&this.renderWorldVerbose(r,s,o),2===t&&this.renderWorld(r),3!==t&&await new Promise((t,e)=>setTimeout(t,i.world.speed))}renderWorldVerbose(t,e,s){e?(this.movementIndicator.classList.remove("arrow_down"),this.movementIndicator.classList.add("arrow_up")):(this.movementIndicator.classList.add("arrow_down"),this.movementIndicator.classList.remove("arrow_up")),s&&this.episodes.length%i.agent.retrainEpisodes==0&&this.renderInterface(),this.renderWorld(t)}renderInterface(){l(this.agent.losses,this.lossInfo),d(this.episodes,this.agent.explorationRate,this.information)}renderWorld(t){c(t,this.scoreInfo),this.game.renderNextFrame()}}).main()}]);