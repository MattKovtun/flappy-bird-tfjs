!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var s={world:{height:400,width:400,speed:10,blocksFrequency:200},bird:{width:15,height:15,color:"red",jumpSpeed:7,fallingSpeed:3,jumpLength:25},block:{width:85,height:105,color:"green"},agent:{retrainEpisodes:200,saveEpisodes:2500}};var r=class{constructor(){this.upperHeight=s.block.height,this.lowerHeight=s.block.height,this.x=320,this.y=s.world.height-this.lowerHeight,this.width=s.block.width}collision(t){return t.y<=this.upperHeight&&t.x>=this.x&&t.x<=this.x+this.width||t.y>=s.world.height-this.lowerHeight&&t.x>=this.x&&t.x<=this.x+this.width}render(t){return t.beginPath(),t.fillStyle=s.block.color,t.fillRect(this.x,0,this.width,this.upperHeight),t.fillRect(this.x,this.y,this.width,this.lowerHeight),this}};var h=class{constructor(){this.y=200,this.x=35,this.jump=new Array(s.bird.jumpLength).fill(-s.bird.jumpSpeed);for(let t=0;t<10;++t)this.jump.push(-s.bird.fallingSpeed);this.jump.push(0)}render(t){return t.beginPath(),t.fillStyle=s.bird.color,t.arc(this.x,this.y,s.bird.height,0,2*Math.PI),t.fill(),this}};var o=class{constructor(t,e){this.ctx=e,this.canvas=t}startNewGame(){this.bird=(new h).render(this.ctx),this.blocks=[(new r).render(this.ctx)],this.current_state=this.bird.jump.length-1,this.ticks=1}gameIsOver(){if(this.bird.y>=s.world.height)return!0;if(this.bird.y<=0)return!0;for(let t=0;t<this.blocks.length;++t)if(this.blocks[t].collision(this.bird))return!0;return!1}performAction(t){t&&(this.current_state=0)}moveBlocks(){this.ticks%s.world.blocksFrequency==0&&this.blocks.push(new r),this.blocks.filter(t=>t.x>=0-s.block.width).map(t=>{t.render(this.ctx),t.x--})}moveBird(){this.bird.render(this.ctx),this.bird.y+=this.bird.jump[this.current_state],this.bird.y+=s.bird.fallingSpeed,this.current_state=Math.min(this.bird.jump.length-1,this.current_state+1)}nextFrame(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.moveBird(),this.moveBlocks(),this.ticks++;const t=this.gameIsOver();return{bird:this.bird,blocks:this.blocks,gameIsOver:t,ticks:this.ticks}}};const n=(t,e)=>Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2));var l=class{constructor(){this.initModel(),this.history=[],this.retrainEpisodes=s.agent.retrainEpisodes,this.saveEpisodes=s.agent.saveEpisodes,this.episode=1}initModel(){this.model=tf.sequential(),this.model.add(tf.layers.dense({units:2,inputShape:[2]})),this.model.compile({loss:"meanSquaredError",optimizer:tf.train.adam()})}modelPredict(t){return this.model.predict(t)}async retrainModel(){let t=[],e=[];for(let i=0;i<this.history.length;++i){const s=this.history[i];t.push([s[0],s[1]]),e.push([s[3],s[3]])}t=tf.tensor2d(t,[this.history.length,2]),e=tf.tensor2d(e,[this.history.length,2]);const i=await this.model.fit(t,e);console.log("Loss after Epoch  : "+i.history.loss[0])}formatInputs(t,e){return tf.tensor2d([t,e],[1,2])}act(t){this.episode++;const{bird:e,blocks:i,ticks:r,gameIsOver:h}=t;let o=100;h&&(o=-100);const l=n(e,i[0]),d=n(e,{x:e.x,y:s.world.height}),c=this.formatInputs(l,d),a=this.modelPredict(c),u=a.argMax(1).dataSync()[0],p=a.max(1).dataSync()[0];return this.history.push([l,d,p,o]),this.episode%this.retrainEpisodes==0&&(this.history.length>=2*this.saveEpisodes&&this.history.splice(this.history.length-this.saveEpisodes),this.retrainModel()),u}};const d=document.getElementById("entry-point"),c=new o(d,d.getContext("2d")),a=new l;c.startNewGame(),setInterval(()=>{const t=c.nextFrame.bind(c)(),e=a.act(t);c.performAction(e),t.gameIsOver&&c.startNewGame()},s.world.speed),document.body.addEventListener("keypress",t=>{32===t.charCode&&c.performAction(!0),0===t.charCode&&c.startNewGame()})}]);